'use client';

import { useState, useRef } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { ArrowLeft, Check, RefreshCw, Mic, Square, Play, Pause } from 'lucide-react';
import Button from '@/components/ui/Button';
import { Card, CardContent } from '@/components/ui/Card';
import BottomNavigation from '@/components/shared/BottomNavigation';

interface SentenceBatch {
  id: number;
  text: string;
  category: 'greeting' | 'question' | 'instruction' | 'story' | 'conversation';
  audioBlob?: Blob;
  isRecorded?: boolean;
}

interface TaskResult {
  completed: number;
  total: number;
  earnings: number;
  completedAt: string;
}

const sentenceBatch: SentenceBatch[] = [
  { 
    id: 1, 
    text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö",
    category: 'greeting'
  },
  { 
    id: 2, 
    text: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö",
    category: 'question'
  },
  { 
    id: 3, 
    text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
    category: 'instruction'
  },
  { 
    id: 4, 
    text: "‡∏Å‡∏≤‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó",
    category: 'story'
  },
  { 
    id: 5, 
    text: "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö",
    category: 'conversation'
  },
  { 
    id: 6, 
    text: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢",
    category: 'greeting'
  },
  { 
    id: 7, 
    text: "‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏£‡∏ñ‡πÑ‡∏ü‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö",
    category: 'question'
  },
  { 
    id: 8, 
    text: "‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏π‡∏î‡∏ä‡πâ‡∏≤‡πÜ ‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
    category: 'instruction'
  },
  { 
    id: 9, 
    text: "‡πÄ‡∏Ç‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏ô‡πÑ‡∏Å‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ",
    category: 'story'
  },
  { 
    id: 10, 
    text: "‡∏ú‡∏°‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
    category: 'conversation'
  }
];

export default function VoiceRecordingBatch() {
  const [responses, setResponses] = useState<SentenceBatch[]>(
    sentenceBatch.map(item => ({ ...item, isRecorded: false }))
  );
  const [currentIndex, setCurrentIndex] = useState(0);
  const [completedCount, setCompletedCount] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [taskResult, setTaskResult] = useState<TaskResult | null>(null);
  const [showSummary, setShowSummary] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const router = useRouter();

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data);
      };

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        const newResponses = [...responses];
        newResponses[currentIndex] = {
          ...newResponses[currentIndex],
          audioBlob,
          isRecorded: true
        };
        setResponses(newResponses);
        setCompletedCount(prev => prev + 1);
        
        // Stop all tracks to release microphone
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorder.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Error accessing microphone:', error);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const playRecording = () => {
    const currentSentence = responses[currentIndex];
    if (currentSentence.audioBlob) {
      const audio = new Audio(URL.createObjectURL(currentSentence.audioBlob));
      setIsPlaying(true);
      audio.play();
      audio.onended = () => setIsPlaying(false);
    }
  };

  const nextSentence = () => {
    if (currentIndex < responses.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  const prevSentence = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  const resetAll = () => {
    setResponses(sentenceBatch.map(item => ({ ...item, isRecorded: false })));
    setCurrentIndex(0);
    setCompletedCount(0);
    setIsRecording(false);
    setIsPlaying(false);
  };

  const submitBatch = () => {
    const completed = responses.filter(r => r.isRecorded).length;
    const earnings = completed * 0.25;
    
    setTaskResult({
      completed: completed,
      total: responses.length,
      earnings: earnings,
      completedAt: new Date().toLocaleString('th-TH')
    });
    setShowSummary(true);
  };

  const currentSentence = responses[currentIndex];
  const progressPercentage = (completedCount / responses.length) * 100;

  // ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏á‡∏≤‡∏ô
  if (showSummary && taskResult) {
    return (
      <div className="min-h-screen bg-yellow-50 p-4">
        <div className="max-w-md mx-auto space-y-6">
          {/* Success Banner */}
          <Card className="border-2 border-yellow-300 bg-yellow-100">
            <CardContent className="p-6">
              <div className="text-center space-y-4">
                <div className="w-20 h-20 bg-yellow-500 rounded-full flex items-center justify-center mx-auto">
                  <Check className="w-10 h-10 text-white" />
                </div>
                
                <div>
                  <h1 className="text-2xl font-bold text-yellow-800 mb-2">
                    üé§ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!
                  </h1>
                  <p className="text-yellow-700">
                    ‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                  </p>
                </div>

                <div className="bg-white rounded-xl p-6 space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à:</span>
                    <span className="font-bold text-yellow-600">
                      {taskResult.completed} / {taskResult.total} ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
                    </span>
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ:</span>
                    <span className="text-2xl font-bold text-green-600">
                      ‡∏ø{taskResult.earnings.toFixed(2)}
                    </span>
                  </div>
                  
                  <div className="flex justify-between items-center text-sm">
                    <span className="text-gray-500">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á:</span>
                    <span className="text-gray-500">{taskResult.completedAt}</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="space-y-3">
            <Button
              onClick={() => router.push('/mobile/labeler/tasks')}
              className="w-full bg-yellow-600 hover:bg-yellow-700 text-white py-4 text-lg font-medium"
            >
              ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            </Button>
            
            <Button
              onClick={() => router.push('/mobile/labeler')}
              variant="outline"
              className="w-full py-4 text-yellow-600 border-yellow-300 hover:bg-yellow-50"
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </Button>
          </div>
        </div>
        <BottomNavigation currentPage="tasks" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-yellow-50">
      {/* Mobile Header */}
      <header className="bg-white shadow-sm px-4 py-4 sticky top-0 z-50 border-b-2 border-yellow-300">
        <div className="flex items-center justify-between">
          <Link 
            href="/mobile/labeler/tasks"
            className="flex items-center space-x-2 text-yellow-600 hover:text-yellow-700"
          >
            <ArrowLeft className="w-5 h-5" />
            <span className="font-medium">‡∏Å‡∏•‡∏±‡∏ö</span>
          </Link>
          
          <div className="text-center">
            <h1 className="font-bold text-gray-900 text-lg">üé§ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á</h1>
            <p className="text-sm text-gray-600">‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á</p>
          </div>
          
          <div className="text-right">
            <div className="text-sm text-gray-600">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</div>
            <div className="font-bold text-yellow-600">‡∏ø0.25/‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ</div>
          </div>
        </div>
        
        {/* Progress Bar */}
        <div className="mt-4">
          <div className="flex justify-between text-sm text-gray-600 mb-1">
            <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
            <span>{currentIndex + 1} / {responses.length}</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-yellow-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentIndex + 1) / responses.length) * 100}%` }}
            ></div>
          </div>
        </div>
      </header>

      <div className="px-4 pb-28 pt-4">
        <div className="max-w-md mx-auto space-y-6">
          {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */}
          <Card className="bg-yellow-50 border border-yellow-200">
            <CardContent className="p-4">
              <h3 className="font-medium text-yellow-800 mb-2">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h3>
              <ul className="text-sm text-yellow-700 space-y-1">
                <li>‚Ä¢ ‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ä‡πâ‡∏≤</li>
                <li>‚Ä¢ ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á</li>
                <li>‚Ä¢ ‡∏ñ‡∏∑‡∏≠‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 15-20 ‡∏ã‡∏°.</li>
                <li>‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ</li>
              </ul>
            </CardContent>
          </Card>
          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ */}
          <Card className="border-2 border-yellow-300 bg-white">
            <CardContent className="p-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-yellow-600 font-medium">
                    ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà {currentIndex + 1} ‡∏à‡∏≤‡∏Å {responses.length}
                  </span>
                  <span className="text-sm text-gray-500">
                    {currentSentence.category === 'greeting' && 'üëã ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢'}
                    {currentSentence.category === 'question' && '‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°'}
                    {currentSentence.category === 'instruction' && 'üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'}
                    {currentSentence.category === 'story' && 'üìñ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏≤'}
                    {currentSentence.category === 'conversation' && 'üí¨ ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤'}
                  </span>
                </div>

                {/* ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô */}
                <div className="bg-yellow-50 border-2 border-yellow-200 rounded-xl p-6">
                  <p className="text-lg leading-relaxed text-gray-800 font-medium">
                    "{currentSentence.text}"
                  </p>
                </div>

                {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
                <div className="flex flex-col items-center space-y-4">
                  {!currentSentence.isRecorded ? (
                    <div className="flex items-center space-x-4">
                      <Button
                        onClick={isRecording ? stopRecording : startRecording}
                        className={`flex items-center space-x-2 px-8 py-3 rounded-full text-lg font-medium shadow-lg transition-all duration-200 ${
                          isRecording 
                            ? 'bg-red-600 hover:bg-red-700 text-white'
                            : 'bg-yellow-600 hover:bg-yellow-700 text-white'
                        }`}
                      >
                        {isRecording ? (
                          <>
                            <Square className="w-6 h-6" />
                            <span>‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</span>
                          </>
                        ) : (
                          <>
                            <Mic className="w-6 h-6" />
                            <span>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</span>
                          </>
                        )}
                      </Button>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center space-y-2">
                      <div className="flex items-center space-x-2 text-green-600">
                        <Check className="w-6 h-6" />
                        <span className="font-medium">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</span>
                      </div>
                      
                      <Button
                        onClick={playRecording}
                        disabled={isPlaying}
                        className="flex items-center space-x-2 px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg"
                      >
                        {isPlaying ? (
                          <>
                            <Pause className="w-4 h-4" />
                            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô</span>
                          </>
                        ) : (
                          <>
                            <Play className="w-4 h-4" />
                            <span>‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</span>
                          </>
                        )}
                      </Button>
                    </div>
                  )}

                  {isRecording && (
                    <div className="text-center">
                      <div className="inline-flex items-center space-x-2 bg-red-100 border border-red-200 rounded-lg px-4 py-2">
                        <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                        <span className="text-red-700 font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...</span>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ */}
          <Card className="bg-white border border-gray-200">
            <CardContent className="p-4">
              <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
                <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
                <span>{completedCount} / {responses.length} ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div 
                  className="bg-yellow-500 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${progressPercentage}%` }}
                ></div>
              </div>
              <div className="text-center mt-2">
                <span className="text-lg font-bold text-yellow-600">
                  ‡∏ø{(completedCount * 0.25).toFixed(2)}
                </span>
                <span className="text-gray-500 text-sm ml-1">
                  (‡∏ø0.25 / ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)
                </span>
              </div>
            </CardContent>
          </Card>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á */}
          <div className="flex justify-between space-x-4">
            <Button
              onClick={prevSentence}
              disabled={currentIndex === 0}
              variant="outline"
              className="flex-1 py-3"
            >
              ‚Üê ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </Button>
            
            <Button
              onClick={nextSentence}
              disabled={currentIndex === responses.length - 1}
              variant="outline"
              className="flex-1 py-3"
            >
              ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí
            </Button>
          </div>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ */}
          <div className="space-y-3">
            <Button
              onClick={submitBatch}
              disabled={completedCount === 0}
              className="w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 text-lg font-medium"
            >
              ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô ({completedCount} ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)
            </Button>
            
            <Button
              onClick={resetAll}
              variant="outline"
              className="w-full py-3 text-yellow-600 border-yellow-300 hover:bg-yellow-50"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </Button>
          </div>

          
        </div>
      </div>

      <BottomNavigation currentPage="tasks" />
    </div>
  );
}