'use client';

import { useState } from 'react';
import Link from 'next/link';
import { ArrowLeft, Check, MessageSquare, User, Bot } from 'lucide-react';
import Button from '@/components/ui/Button';
import { Card, CardContent } from '@/components/ui/Card';
import { useRouter } from 'next/navigation';
import { TASK_CONFIGS } from '@/config/taskConfig';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

interface TaskResult {
  completed: number;
  total: number;
  earnings: number;
  completedAt: string;
}

const conversation: Message[] = [
  { role: 'user', content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≠‡∏ô' },
  { role: 'assistant', content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å ‡∏ú‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8-10 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏î‡∏î‡∏ä‡πà‡∏ß‡∏á 10:00-15:00 ‡∏ô. ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏™‡∏ß‡∏°‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡∏î‡∏µ' },
  { role: 'user', content: '‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πà‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?' },
  { role: 'assistant', content: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏™‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ï‡∏á‡πÇ‡∏° ‡∏™‡πâ‡∏° ‡∏•‡∏¥‡πâ‡∏ô‡∏à‡∏µ‡πà ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏±‡∏ô ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏≠‡∏î ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏™‡∏à‡∏±‡∏î ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏∏‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡∏à‡∏∞‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà' }
];

const questions = [
  {
    id: 1,
    question: '‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á AI ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
    options: [
      { value: 'very_helpful', label: '‚úÖ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏°‡∏≤‡∏Å', color: 'green' },
      { value: 'helpful', label: 'üëç ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå', color: 'blue' },
      { value: 'neutral', label: 'üòê ‡πÄ‡∏â‡∏¢‡πÜ', color: 'gray' },
      { value: 'not_helpful', label: 'üëé ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå', color: 'red' }
    ]
  },
  {
    id: 2,
    question: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö',
    options: [
      { value: 'very_clear', label: 'üíØ ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏°‡∏≤‡∏Å', color: 'green' },
      { value: 'clear', label: 'üëå ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô', color: 'blue' },
      { value: 'somewhat_clear', label: 'ü§î ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô', color: 'yellow' },
      { value: 'unclear', label: 'üòµ ‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô', color: 'red' }
    ]
  },
  {
    id: 3,
    question: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö',
    options: [
      { value: 'very_polite', label: 'ü§ó ‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å', color: 'green' },
      { value: 'polite', label: 'üòä ‡∏™‡∏∏‡∏†‡∏≤‡∏û', color: 'blue' },
      { value: 'neutral', label: 'üòê ‡πÄ‡∏â‡∏¢‡πÜ', color: 'gray' },
      { value: 'impolite', label: 'üò† ‡∏´‡∏¢‡∏≤‡∏ö‡∏Ñ‡∏≤‡∏¢', color: 'red' }
    ]
  }
];

export default function ChatQAEvaluation() {
  const [responses, setResponses] = useState<{[key: number]: string}>({});
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showSummary, setShowSummary] = useState(false);
  const [taskResult, setTaskResult] = useState<TaskResult | null>(null);
  const router = useRouter();

  const handleResponse = (questionId: number, value: string) => {
    setResponses(prev => ({
      ...prev,
      [questionId]: value
    }));

    // Auto advance to next question
    if (currentQuestion < questions.length - 1) {
      setTimeout(() => {
        setCurrentQuestion(prev => prev + 1);
      }, 500);
    }
  };

  const submitEvaluation = () => {
    const completedResponses = Object.keys(responses).length;
    if (completedResponses < questions.length) {
      alert(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á ${questions.length} ‡∏Ç‡πâ‡∏≠ (‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ${completedResponses} ‡∏Ç‡πâ‡∏≠)`);
      return;
    }
    
    // Set task result and show summary
    setTaskResult({
      completed: questions.length,
      total: questions.length,
      earnings: TASK_CONFIGS.t3.rate,
      completedAt: new Date().toLocaleString('th-TH')
    });
    setShowSummary(true);
  };

  const getColorClasses = (color: string, isSelected: boolean) => {
    const colors = {
      green: isSelected ? 'bg-green-600 text-white border-green-600' : 'bg-white text-gray-700 border-gray-300 hover:border-green-500',
      blue: isSelected ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-gray-700 border-gray-300 hover:border-blue-500',
      yellow: isSelected ? 'bg-yellow-600 text-white border-yellow-600' : 'bg-white text-gray-700 border-gray-300 hover:border-yellow-500',
      gray: isSelected ? 'bg-gray-600 text-white border-gray-600' : 'bg-white text-gray-700 border-gray-300 hover:border-gray-500',
      red: isSelected ? 'bg-red-600 text-white border-red-600' : 'bg-white text-gray-700 border-gray-300 hover:border-red-500'
    };
    return colors[color as keyof typeof colors] || colors.gray;
  };

  const completedCount = Object.keys(responses).length;

  if (showSummary && taskResult) {
    return (
      <div className="min-h-screen bg-orange-50 p-4">
        <div className="max-w-md mx-auto space-y-6">
          {/* Success Banner */}
          <Card variant="soft" padding="lg" className="border-2 border-orange-300 bg-orange-100">
            <CardContent>
              <div className="text-center">
                <div className="text-6xl mb-4">üéâ</div>
                <h1 className="text-2xl font-bold text-gray-800 mb-2">‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!</h1>
                <p className="text-gray-600">‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå</p>
              </div>
            </CardContent>
          </Card>

          {/* Payment Summary */}
          <Card variant="soft" padding="lg" className="border-2 border-orange-300">
            <CardContent>
              <h2 className="text-xl font-bold text-gray-800 mb-4 text-center">‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h2>
              <div className="space-y-3">
                <div className="flex justify-between items-center p-3 bg-white rounded-xl">
                  <span className="text-gray-600">‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à:</span>
                  <span className="font-bold text-gray-800">{taskResult.completed} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-white rounded-xl">
                  <span className="text-gray-600">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á:</span>
                  <span className="font-bold text-gray-800">‡∏ø{TASK_CONFIGS.t3.rate} ‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô</span>
                </div>
                <div className="flex justify-between items-center p-4 bg-orange-600 text-white rounded-xl">
                  <span className="text-lg font-bold">‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                  <span className="text-2xl font-bold">‡∏ø{taskResult.earnings.toFixed(2)}</span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Task Details */}
          <Card variant="soft" padding="lg" className="border-2 border-orange-300">
            <CardContent>
              <h3 className="text-lg font-bold text-gray-800 mb-3">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô</h3>
              <div className="space-y-2 text-gray-600">
                <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô:</strong> ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤</p>
                <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:</strong> {taskResult.total} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</p>
                <p><strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à:</strong> {taskResult.completedAt}</p>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="space-y-3">
            <Button
              onClick={() => router.push('/mobile/labeler/summary')}
              className="w-full py-4 bg-gradient-to-r from-orange-600 to-red-600 text-white rounded-2xl font-bold text-lg shadow-lg hover:from-orange-700 hover:to-red-700 transition-colors"
            >
              ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </Button>
            <Button
              onClick={() => router.push('/mobile/labeler')}
              className="w-full py-4 bg-orange-600 text-white rounded-2xl font-bold text-lg shadow-lg hover:bg-orange-700 transition-colors"
            >
              ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </Button>
            <Button
              onClick={() => {
                setShowSummary(false);
                setTaskResult(null);
                setResponses({});
                setCurrentQuestion(0);
              }}
              variant="secondary"
              className="w-full py-4 bg-white text-orange-600 border-2 border-orange-600 rounded-2xl font-bold text-lg hover:bg-orange-50 transition-colors"
            >
              ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="bg-white shadow-lg px-4 py-4 sticky top-0 z-50 border-b-4 border-orange-600">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Link href="/mobile/labeler/tasks">
              <button className="w-10 h-10 bg-gray-900 rounded-2xl flex items-center justify-center shadow-lg">
                <ArrowLeft className="w-5 h-5 text-white" />
              </button>
            </Link>
            <div>
              <h1 className="font-bold text-gray-900 text-lg">‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ AI</h1>
              <p className="text-base text-gray-700 font-medium">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ‡∏ø{TASK_CONFIGS.t3.rate}</p>
            </div>
          </div>
          
          <div className="text-right">
            <div className="text-2xl font-bold text-orange-600">{completedCount}/{questions.length}</div>
            <div className="text-sm text-gray-600">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</div>
          </div>
        </div>
      </header>

      <div className="px-4 py-6">
        {/* Conversation */}
        <Card variant="elevated" padding="lg" className="mb-6 border-3 border-gray-300">
          <CardContent>
            <h3 className="text-lg font-bold text-gray-900 mb-4">üí¨ ‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</h3>
            
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {conversation.map((message, index) => (
                <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-[85%] ${
                    message.role === 'user' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-gray-100 text-gray-800'
                  } rounded-2xl px-4 py-3`}>
                    <div className="flex items-center space-x-2 mb-2">
                      {message.role === 'user' ? (
                        <User className="w-4 h-4" />
                      ) : (
                        <Bot className="w-4 h-4" />
                      )}
                      <span className="text-xs font-medium">
                        {message.role === 'user' ? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : 'AI Assistant'}
                      </span>
                    </div>
                    <p className="text-sm leading-relaxed">{message.content}</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Questions */}
        <Card variant="elevated" padding="lg" className="mb-6 border-3 border-orange-300">
          <CardContent>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-bold text-gray-900">
                üìã ‡∏Ç‡πâ‡∏≠ {currentQuestion + 1}: {questions[currentQuestion].question}
              </h3>
            </div>

            <div className="space-y-3">
              {questions[currentQuestion].options.map((option) => (
                <button
                  key={option.value}
                  onClick={() => handleResponse(questions[currentQuestion].id, option.value)}
                  className={`w-full p-4 rounded-2xl border-3 font-bold text-lg transition-all ${
                    getColorClasses(option.color, responses[questions[currentQuestion].id] === option.value)
                  }`}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Navigation */}
        <Card variant="elevated" padding="lg" className="mb-6 border-3 border-gray-300">
          <CardContent>
            <div className="flex space-x-3">
              <button
                onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
                disabled={currentQuestion === 0}
                className="flex-1 py-3 bg-gray-500 text-white rounded-2xl font-bold text-base shadow-lg hover:bg-gray-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                ‚Üê ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
              </button>
              
              <button
                onClick={() => setCurrentQuestion(Math.min(questions.length - 1, currentQuestion + 1))}
                disabled={currentQuestion === questions.length - 1}
                className="flex-1 py-3 bg-orange-500 text-white rounded-2xl font-bold text-base shadow-lg hover:bg-orange-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí
              </button>
            </div>
          </CardContent>
        </Card>

        {/* Progress Summary */}
        <Card variant="elevated" padding="lg" className="mb-6 border-3 border-gray-300">
          <CardContent>
            <h3 className="text-lg font-bold text-gray-900 mb-4">üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</h3>
            <div className="grid grid-cols-3 gap-3">
              {questions.map((question, index) => (
                <button
                  key={question.id}
                  onClick={() => setCurrentQuestion(index)}
                  className={`p-3 rounded-xl border-2 text-sm font-medium transition-all ${
                    index === currentQuestion
                      ? 'bg-orange-100 border-orange-500 text-orange-900'
                      : responses[question.id]
                        ? 'bg-green-100 border-green-400 text-green-800'
                        : 'bg-gray-100 border-gray-300 text-gray-600'
                  }`}
                >
                  ‡∏Ç‡πâ‡∏≠ {index + 1}
                  {responses[question.id] && (
                    <div className="text-xs mt-1">‚úì ‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß</div>
                  )}
                </button>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Submit Button */}
        <Card variant="soft" padding="lg" className="border-2 border-gray-300">
          <CardContent>
            <Button
              onClick={submitEvaluation}
              className="w-full py-4 bg-green-600 text-white rounded-2xl font-bold text-lg shadow-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2"
            >
              <Check className="w-6 h-6" />
              <span>‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏ø{TASK_CONFIGS.t3.rate})</span>
            </Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}