'use client';

import { useState } from 'react';
import Link from 'next/link';
import { ArrowLeft, Upload, Send, FileText, Paperclip, Star, Clock } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import { gradients, typography, components } from '@/styles/designSystem';

const dataTypes = [
  'Text / ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
  'Image / ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û', 
  'Audio / ‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
  'Video / ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠',
  'Multimodal / ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö',
  'Other / ‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
];

const qualityLevels = [
  { value: 'basic', label: 'Basic - ‡∏õ‡∏π‡πà‡∏¢‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', description: '‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô' },
  { value: 'expert', label: 'Expert - ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç', description: '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞' }
];

export default function CustomRequest() {
  const [formData, setFormData] = useState({
    projectName: '',
    objective: '',
    dataType: '',
    qualityLevel: 'basic',
    exampleFormat: '',
    outputFormat: '',
    additionalNotes: ''
  });
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);

  const handleSubmit = () => {
    // Validate required fields
    if (!formData.projectName || !formData.objective || !formData.dataType) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    alert(`‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ\\n\\n‡∏ó‡∏µ‡∏° LabelLink ‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\\n‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á Email ‡∏´‡∏£‡∏∑‡∏≠ LINE: @labellink\\n\\n‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠: REQ-${Date.now().toString().slice(-6)}`);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setUploadedFiles(prev => [...prev, ...files]);
  };

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
  };

  return (
    <div className={`min-h-screen ${gradients.backgroundLight}`}>
      {/* Header */}
      <header className={components.header.container}>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Link href="/mobile/client">
              <button className={components.iconContainer.secondary}>
                <ArrowLeft className="w-5 h-5 text-green-600" />
              </button>
            </Link>
            <div>
              <h1 className={typography.h2}>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á</h1>
              <p className={typography.caption}>‡∏á‡∏≤‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
            </div>
          </div>
        </div>
      </header>

      <div className="px-4 py-6">
        {/* Info Banner */}
        <Card variant="elevated" padding="lg" className="mb-6 bg-gradient-to-r from-green-100 to-emerald-100 border-2 border-green-200">
          <CardContent>
            <div className="flex items-start space-x-3">
              <Star className="w-6 h-6 text-green-600 flex-shrink-0 mt-1" />
              <div>
                <h3 className={`${typography.h3} text-green-800 mb-2`}>üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©?</h3>
                <p className={`${typography.body} text-sm mb-2`}>
                  ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤ ‡∏ó‡∏µ‡∏°‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                </p>
                <div className="flex items-center space-x-4 text-xs text-green-600">
                  <div className="flex items-center space-x-1">
                    <Clock className="w-3 h-3" />
                    <span>‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô 24 ‡∏ä‡∏°.</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <FileText className="w-3 h-3" />
                    <span>‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ü‡∏£‡∏µ</span>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Form */}
        <div className="space-y-6">
          {/* Project Name */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className={`block text-sm font-bold ${typography.h3} mb-3`}>
                üìù ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ *
              </label>
              <input
                type="text"
                value={formData.projectName}
                onChange={(e) => setFormData(prev => ({ ...prev, projectName: e.target.value }))}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl focus:border-green-500 focus:outline-none"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"
              />
            </CardContent>
          </Card>

          {/* Objective */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className={`block text-sm font-bold ${typography.h3} mb-3`}>
                üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå / Use Case *
              </label>
              <textarea
                rows={4}
                value={formData.objective}
                onChange={(e) => setFormData(prev => ({ ...prev, objective: e.target.value }))}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl focus:border-green-500 focus:outline-none"
                placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ù‡∏∂‡∏Å AI model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö..."
              />
            </CardContent>
          </Card>

          {/* Data Type */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className={`block text-sm font-bold ${typography.h3} mb-3`}>
                üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• *
              </label>
              <div className="grid grid-cols-2 gap-3">
                {dataTypes.map((type) => (
                  <button
                    key={type}
                    onClick={() => setFormData(prev => ({ ...prev, dataType: type }))}
                    className={`p-3 rounded-2xl border-2 text-sm font-medium transition-all ${
                      formData.dataType === type
                        ? 'bg-green-600 text-white border-green-600'
                        : 'bg-white text-gray-700 border-gray-300 hover:border-green-400'
                    }`}
                  >
                    {type}
                  </button>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Quality Level */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className={`block text-sm font-bold ${typography.h3} mb-3`}>
                ‚≠ê ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              </label>
              <div className="space-y-3">
                {qualityLevels.map((level) => (
                  <button
                    key={level.value}
                    onClick={() => setFormData(prev => ({ ...prev, qualityLevel: level.value }))}
                    className={`w-full p-4 rounded-2xl border-2 text-left transition-all ${
                      formData.qualityLevel === level.value
                        ? 'bg-green-600 text-white border-green-600'
                        : 'bg-white text-gray-700 border-gray-300 hover:border-green-400'
                    }`}
                  >
                    <div className="font-bold mb-1">{level.label}</div>
                    <div className="text-sm opacity-90">{level.description}</div>
                  </button>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Example Format */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className={`block text-sm font-bold ${typography.h3} mb-3`}>
                üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ
              </label>
              <textarea
                rows={3}
                value={formData.exampleFormat}
                onChange={(e) => setFormData(prev => ({ ...prev, exampleFormat: e.target.value }))}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl focus:border-green-500 focus:outline-none"
                placeholder='‡πÄ‡∏ä‡πà‡∏ô {"text": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "image_url": "https://..."}'
              />
            </CardContent>
          </Card>

          {/* Output Format */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className={`block text-sm font-bold ${typography.h3} mb-3`}>
                üì§ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              </label>
              <textarea
                rows={3}
                value={formData.outputFormat}
                onChange={(e) => setFormData(prev => ({ ...prev, outputFormat: e.target.value }))}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl focus:border-green-500 focus:outline-none"
                placeholder='‡πÄ‡∏ä‡πà‡∏ô {"label": "positive", "confidence": 0.95, "labeler_age": "30-40"}'
              />
            </CardContent>
          </Card>

          {/* File Upload */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className={`block text-sm font-bold ${typography.h3} mb-3`}>
                üìé ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
              </label>
              
              <div className="border-2 border-dashed border-gray-300 rounded-2xl p-6 text-center mb-4">
                <Upload className="w-10 h-10 text-gray-400 mx-auto mb-3" />
                <p className="text-gray-600 mb-2">‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                <p className="text-xs text-gray-500 mb-3">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: PDF, DOC, XLS, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, ‡∏Ø‡∏•‡∏Ø</p>
                <input
                  type="file"
                  multiple
                  onChange={handleFileUpload}
                  className="hidden"
                  id="file-upload"
                />
                <label htmlFor="file-upload">
                  <Button className={`${components.button.secondary} cursor-pointer`}>
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                  </Button>
                </label>
              </div>

              {/* Uploaded Files */}
              {uploadedFiles.length > 0 && (
                <div className="space-y-2">
                  <h4 className="font-medium text-gray-700">‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö:</h4>
                  {uploadedFiles.map((file, index) => (
                    <div key={index} className="flex items-center justify-between bg-gray-50 p-3 rounded-xl">
                      <div className="flex items-center space-x-2">
                        <Paperclip className="w-4 h-4 text-gray-500" />
                        <span className="text-sm text-gray-700 truncate">{file.name}</span>
                        <span className="text-xs text-gray-500">({(file.size / 1024).toFixed(1)} KB)</span>
                      </div>
                      <button
                        onClick={() => removeFile(index)}
                        className="text-red-500 hover:text-red-700 text-sm"
                      >
                        ‡∏•‡∏ö
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Additional Notes */}
          <Card variant="elevated" padding="lg">
            <CardContent>
              <label className="block text-sm font-bold text-purple-800 mb-3">
                üí≠ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
              </label>
              <textarea
                rows={3}
                value={formData.additionalNotes}
                onChange={(e) => setFormData(prev => ({ ...prev, additionalNotes: e.target.value }))}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl focus:border-green-500 focus:outline-none"
                placeholder="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Ç‡πâ‡∏≠‡∏Å‡∏±‡∏á‡∏ß‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞..."
              />
            </CardContent>
          </Card>

          {/* Submit Button */}
          <div className="sticky bottom-4">
            <Button 
              onClick={handleSubmit}
              className={`${components.button.cta} w-full flex items-center justify-center space-x-2`}
            >
              <Send className="w-5 h-5" />
              <span>‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠</span>
            </Button>
          </div>

          {/* Contact Info */}
          <Card variant="elevated" padding="lg" className="bg-gray-50">
            <CardContent>
              <h4 className={`${typography.h4} mb-2`}>üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á</h4>
              <div className="space-y-1 text-sm text-gray-600">
                <p>üìß Email: custom@labellink.co.th</p>
                <p>üì± LINE: @labellink</p>
                <p>‚è∞ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Bottom padding */}
      <div className="h-20"></div>
    </div>
  );
}