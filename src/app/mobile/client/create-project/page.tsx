'use client';

import { useState } from 'react';
import Link from 'next/link';
import { ArrowLeft, Brain, Image, MessageSquare, Volume2, Upload, DollarSign, Users, Eye } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import { gradients, typography, components } from '@/styles/designSystem';

interface Template {
  id: string;
  name: string;
  icon: React.ElementType;
  description: string;
  minReward: number;
  maxReward: number;
  estimatedTime: string;
  sampleSize: string;
  instructions: string[];
  preparation: string[];
}

const templates: Template[] = [
  {
    id: 'text-sentiment',
    name: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å',
    icon: Brain,
    description: '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ö‡∏ß‡∏Å ‡∏•‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
    minReward: 0.08,
    maxReward: 0.15,
    estimatedTime: '30 ‡∏ß‡∏¥/‡∏Ç‡πâ‡∏≠',
    sampleSize: '100-1,000 ‡∏Ç‡πâ‡∏≠',
    instructions: [
      '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "text"',
      '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°)',
      '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏ö‡∏ß‡∏Å/‡∏•‡∏ö/‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°',
      '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô 0.08-0.15 ‡∏ö‡∏≤‡∏ó'
    ],
    preparation: [
      'üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (.csv/.json)',
      'üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
      'üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 80 ‡∏ö‡∏≤‡∏ó',
      '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ 1-3 ‡∏ß‡∏±‡∏ô'
    ]
  },
  {
    id: 'image-tagging',
    name: '‡∏ï‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
    icon: Image,
    description: '‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
    minReward: 0.10,
    maxReward: 0.25,
    estimatedTime: '45 ‡∏ß‡∏¥/‡∏£‡∏π‡∏õ',
    sampleSize: '50-500 ‡∏£‡∏π‡∏õ',
    instructions: [
      '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ URL',
      '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏ñ, ‡∏Ñ‡∏ô, ‡∏™‡∏±‡∏ï‡∏ß‡πå)',
      '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏£‡∏π‡∏õ (1-10 ‡∏õ‡πâ‡∏≤‡∏¢)',
      '‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô 0.10-0.25 ‡∏ö‡∏≤‡∏ó'
    ],
    preparation: [
      'üñºÔ∏è ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (.jpg/.png) ‡∏´‡∏£‡∏∑‡∏≠ URL',
      'üè∑Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
      'üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 50 ‡∏ö‡∏≤‡∏ó',
      '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ 1-2 ‡∏ß‡∏±‡∏ô'
    ]
  },
  {
    id: 'chat-qa',
    name: '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ AI',
    icon: MessageSquare,
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á Chatbot',
    minReward: 0.20,
    maxReward: 0.50,
    estimatedTime: '2 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏™‡∏ô‡∏ó‡∏ô‡∏≤',
    sampleSize: '20-200 ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤',
    instructions: [
      '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (JSON format)',
      '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥)',
      '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 1-5 ‡∏´‡∏£‡∏∑‡∏≠ Yes/No',
      '‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏á‡πà‡∏≤‡∏¢ 0.20-0.50 ‡∏ö‡∏≤‡∏ó'
    ],
    preparation: [
      'üí¨ ‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (.json)',
      'üìã ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
      'üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 100 ‡∏ö‡∏≤‡∏ó',
      '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ 2-4 ‡∏ß‡∏±‡∏ô'
    ]
  },
  {
    id: 'audio-classification',
    name: '‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
    icon: Volume2,
    description: '‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏•‡∏á ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥',
    minReward: 0.15,
    maxReward: 0.30,
    estimatedTime: '1 ‡∏ô‡∏≤‡∏ó‡∏µ/‡πÑ‡∏ü‡∏•‡πå',
    sampleSize: '30-300 ‡πÑ‡∏ü‡∏•‡πå',
    instructions: [
      '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (.mp3/.wav) ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå',
      '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
      '‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 30 ‡∏ß‡∏¥)',
      '‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô 0.15-0.30 ‡∏ö‡∏≤‡∏ó'
    ],
    preparation: [
      'üéµ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (.mp3/.wav) ‡∏´‡∏£‡∏∑‡∏≠ URL',
      'üìÇ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà',
      'üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 90 ‡∏ö‡∏≤‡∏ó',
      '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ 2-5 ‡∏ß‡∏±‡∏ô'
    ]
  }
];

export default function CreateProject() {
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [showInstructions, setShowInstructions] = useState<string | null>(null);

  return (
    <div className={`min-h-screen ${gradients.backgroundLight}`}>
      {/* Header */}
      <header className={components.header.container}>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Link href="/mobile/client">
              <button className={components.iconContainer.secondary}>
                <ArrowLeft className="w-5 h-5 text-green-600" />
              </button>
            </Link>
            <div>
              <h1 className={typography.h2}>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà</h1>
              <p className={typography.caption}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Template ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</p>
            </div>
          </div>
        </div>
      </header>

      <div className="px-4 py-6">
        {!selectedTemplate ? (
          <>
            {/* Template Selection */}
            <div className="mb-6">
              <h2 className={typography.h1}>üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Template</h2>
              <p className={`${typography.body} mt-2 mb-4`}>
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              </p>
            </div>

            <div className="space-y-4 mb-8">
              {templates.map((template) => {
                const IconComponent = template.icon;
                return (
                  <Card 
                    key={template.id} 
                    variant="elevated" 
                    padding="lg" 
                    className={`${components.card.interactive} cursor-pointer border-2 border-gray-200 hover:border-green-400`}
                    onClick={() => setSelectedTemplate(template)}
                  >
                    <CardContent>
                      <div className="flex items-start space-x-4">
                        <div className={`w-16 h-16 ${gradients.primaryButton} rounded-3xl flex items-center justify-center flex-shrink-0`}>
                          <IconComponent className="w-8 h-8 text-white" />
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <h3 className={`${typography.h3} mb-1`}>{template.name}</h3>
                          <p className={`${typography.body} text-sm mb-3`}>{template.description}</p>
                          
                          <div className="grid grid-cols-2 gap-3 text-xs">
                            <div className="flex items-center space-x-1">
                              <DollarSign className="w-3 h-3 text-green-600" />
                              <span className="text-green-600">
                                {template.minReward}-{template.maxReward} ‡∏ö‡∏≤‡∏ó
                              </span>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Users className="w-3 h-3 text-green-600" />
                              <span className="text-green-600">{template.sampleSize}</span>
                            </div>
                          </div>
                        </div>
                        
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            setShowInstructions(
                              showInstructions === template.id ? null : template.id
                            );
                          }}
                          className={components.iconContainer.accent}
                        >
                          <Eye className="w-4 h-4 text-green-600" />
                        </button>
                      </div>

                      {/* Instructions Expansion */}
                      {showInstructions === template.id && (
                        <div className="mt-4 pt-4 border-t border-gray-200">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <h4 className={`${typography.h4} mb-2`}>üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á:</h4>
                              <ul className="space-y-1">
                                {template.instructions.map((instruction, index) => (
                                  <li key={index} className={`text-sm ${typography.body}`}>
                                    {index + 1}. {instruction}
                                  </li>
                                ))}
                              </ul>
                            </div>
                            
                            <div>
                              <h4 className={`${typography.h4} mb-2`}>üì¶ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°:</h4>
                              <ul className="space-y-1">
                                {template.preparation.map((item, index) => (
                                  <li key={index} className={`text-sm ${typography.body}`}>
                                    {item}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                );
              })}
            </div>

            {/* Custom Option */}
            <Card variant="elevated" padding="lg" className="border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-violet-50">
              <CardContent>
                <div className="text-center">
                  <h3 className={`${typography.h3} text-purple-800 mb-2`}>
                    üé® ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©?
                  </h3>
                  <p className="text-purple-700 mb-4">
                    ‡∏´‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
                  </p>
                  <Link href="/mobile/client/custom-request">
                    <Button className="bg-gradient-to-r from-purple-500 to-violet-600 text-white px-8 py-3 rounded-2xl font-bold">
                      ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </>
        ) : (
          <>
            {/* Template Configuration */}
            <div className="mb-6">
              <div className="flex items-center space-x-3 mb-4">
                <button
                  onClick={() => setSelectedTemplate(null)}
                  className={components.iconContainer.secondary}
                >
                  <ArrowLeft className="w-5 h-5 text-green-600" />
                </button>
                <div>
                  <h2 className={typography.h1}>{selectedTemplate.name}</h2>
                  <p className={typography.caption}>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                </div>
              </div>
            </div>

            {/* Configuration Form */}
            <div className="space-y-6">
              {/* Project Info */}
              <Card variant="elevated" padding="lg">
                <CardContent>
                  <h3 className={`${typography.h3} mb-4`}>üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
                      </label>
                      <input
                        type="text"
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl focus:border-green-500 focus:outline-none"
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                      </label>
                      <textarea
                        rows={3}
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-2xl focus:border-green-500 focus:outline-none"
                        placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£..."
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Data Upload */}
              <Card variant="elevated" padding="lg">
                <CardContent>
                  <h3 className="font-bold text-green-800 mb-4">üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
                  <div className="border-2 border-dashed border-gray-300 rounded-2xl p-8 text-center">
                    <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600 mb-2">‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                    <p className="text-sm text-gray-500">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: .csv, .json, .jpg, .png</p>
                    <Button className="mt-4 bg-green-500 text-white px-6 py-2 rounded-xl">
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Reward Settings */}
              <Card variant="elevated" padding="lg">
                <CardContent>
                  <h3 className={`${typography.h3} mb-4`}>üí∞ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)
                      </label>
                      <div className="flex items-center space-x-4">
                        <input
                          type="range"
                          min={selectedTemplate.minReward}
                          max={selectedTemplate.maxReward}
                          step="0.01"
                          defaultValue={selectedTemplate.minReward}
                          className="flex-1"
                        />
                        <div className={`w-16 text-center bg-gray-100 py-2 rounded-lg font-bold ${typography.h1.split(' ').pop()}`}>
                          {selectedTemplate.minReward}
                        </div>
                      </div>
                      <div className="flex justify-between text-xs text-gray-500 mt-1">
                        <span>{selectedTemplate.minReward} ‡∏ö‡∏≤‡∏ó</span>
                        <span>{selectedTemplate.maxReward} ‡∏ö‡∏≤‡∏ó</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Demographics Toggle */}
              <Card variant="elevated" padding="lg">
                <CardContent>
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className={typography.h3}>üìä ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£</h3>
                      <p className={typography.caption}>
                        ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏û‡∏® ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Bias Analysis
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" className="sr-only peer" defaultChecked />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                    </label>
                  </div>
                </CardContent>
              </Card>

              {/* Launch Button */}
              <div className="sticky bottom-4">
                <Link href="/mobile/client/projects">
                  <Button className={components.button.cta}>
                    üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
                  </Button>
                </Link>
              </div>
            </div>
          </>
        )}
      </div>

      {/* Bottom padding for fixed button */}
      <div className="h-20"></div>
    </div>
  );
}